// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class UpdateTrackMainMissionIdCsReqOuterClass {
  /**
   * Protobuf type {@code UpdateTrackMainMissionIdCsReq}
   */
  public static final class UpdateTrackMainMissionIdCsReq extends ProtoMessage<UpdateTrackMainMissionIdCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 unk_int = 10;</code>
     */
    private int unkInt;

    /**
     * <code>optional uint32 cur_mission_id = 15;</code>
     */
    private int curMissionId;

    /**
     * <code>optional .TrackMainMissionUpdate track_main_mission_status = 12;</code>
     */
    private int trackMainMissionStatus;

    private UpdateTrackMainMissionIdCsReq() {
    }

    /**
     * @return a new empty instance of {@code UpdateTrackMainMissionIdCsReq}
     */
    public static UpdateTrackMainMissionIdCsReq newInstance() {
      return new UpdateTrackMainMissionIdCsReq();
    }

    /**
     * <code>optional uint32 unk_int = 10;</code>
     * @return whether the unkInt field is set
     */
    public boolean hasUnkInt() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 unk_int = 10;</code>
     * @return this
     */
    public UpdateTrackMainMissionIdCsReq clearUnkInt() {
      bitField0_ &= ~0x00000001;
      unkInt = 0;
      return this;
    }

    /**
     * <code>optional uint32 unk_int = 10;</code>
     * @return the unkInt
     */
    public int getUnkInt() {
      return unkInt;
    }

    /**
     * <code>optional uint32 unk_int = 10;</code>
     * @param value the unkInt to set
     * @return this
     */
    public UpdateTrackMainMissionIdCsReq setUnkInt(final int value) {
      bitField0_ |= 0x00000001;
      unkInt = value;
      return this;
    }

    /**
     * <code>optional uint32 cur_mission_id = 15;</code>
     * @return whether the curMissionId field is set
     */
    public boolean hasCurMissionId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 cur_mission_id = 15;</code>
     * @return this
     */
    public UpdateTrackMainMissionIdCsReq clearCurMissionId() {
      bitField0_ &= ~0x00000002;
      curMissionId = 0;
      return this;
    }

    /**
     * <code>optional uint32 cur_mission_id = 15;</code>
     * @return the curMissionId
     */
    public int getCurMissionId() {
      return curMissionId;
    }

    /**
     * <code>optional uint32 cur_mission_id = 15;</code>
     * @param value the curMissionId to set
     * @return this
     */
    public UpdateTrackMainMissionIdCsReq setCurMissionId(final int value) {
      bitField0_ |= 0x00000002;
      curMissionId = value;
      return this;
    }

    /**
     * <code>optional .TrackMainMissionUpdate track_main_mission_status = 12;</code>
     * @return whether the trackMainMissionStatus field is set
     */
    public boolean hasTrackMainMissionStatus() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional .TrackMainMissionUpdate track_main_mission_status = 12;</code>
     * @return this
     */
    public UpdateTrackMainMissionIdCsReq clearTrackMainMissionStatus() {
      bitField0_ &= ~0x00000004;
      trackMainMissionStatus = 0;
      return this;
    }

    /**
     * <code>optional .TrackMainMissionUpdate track_main_mission_status = 12;</code>
     * @return the trackMainMissionStatus
     */
    public TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate getTrackMainMissionStatus() {
      return TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate.forNumber(trackMainMissionStatus);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link UpdateTrackMainMissionIdCsReq#getTrackMainMissionStatus()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getTrackMainMissionStatusValue() {
      return trackMainMissionStatus;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate}. Setting an invalid value
     * can cause {@link UpdateTrackMainMissionIdCsReq#getTrackMainMissionStatus()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public UpdateTrackMainMissionIdCsReq setTrackMainMissionStatusValue(final int value) {
      bitField0_ |= 0x00000004;
      trackMainMissionStatus = value;
      return this;
    }

    /**
     * <code>optional .TrackMainMissionUpdate track_main_mission_status = 12;</code>
     * @param value the trackMainMissionStatus to set
     * @return this
     */
    public UpdateTrackMainMissionIdCsReq setTrackMainMissionStatus(
        final TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate value) {
      bitField0_ |= 0x00000004;
      trackMainMissionStatus = value.getNumber();
      return this;
    }

    @Override
    public UpdateTrackMainMissionIdCsReq copyFrom(final UpdateTrackMainMissionIdCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        unkInt = other.unkInt;
        curMissionId = other.curMissionId;
        trackMainMissionStatus = other.trackMainMissionStatus;
      }
      return this;
    }

    @Override
    public UpdateTrackMainMissionIdCsReq mergeFrom(final UpdateTrackMainMissionIdCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasUnkInt()) {
        setUnkInt(other.unkInt);
      }
      if (other.hasCurMissionId()) {
        setCurMissionId(other.curMissionId);
      }
      if (other.hasTrackMainMissionStatus()) {
        setTrackMainMissionStatusValue(other.trackMainMissionStatus);
      }
      return this;
    }

    @Override
    public UpdateTrackMainMissionIdCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      unkInt = 0;
      curMissionId = 0;
      trackMainMissionStatus = 0;
      return this;
    }

    @Override
    public UpdateTrackMainMissionIdCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof UpdateTrackMainMissionIdCsReq)) {
        return false;
      }
      UpdateTrackMainMissionIdCsReq other = (UpdateTrackMainMissionIdCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasUnkInt() || unkInt == other.unkInt)
        && (!hasCurMissionId() || curMissionId == other.curMissionId)
        && (!hasTrackMainMissionStatus() || trackMainMissionStatus == other.trackMainMissionStatus);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 80);
        output.writeUInt32NoTag(unkInt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(curMissionId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeEnumNoTag(trackMainMissionStatus);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(unkInt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(curMissionId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(trackMainMissionStatus);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public UpdateTrackMainMissionIdCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 80: {
            // unkInt
            unkInt = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // curMissionId
            curMissionId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // trackMainMissionStatus
            final int value = input.readInt32();
            if (TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate.forNumber(value) != null) {
              trackMainMissionStatus = value;
              bitField0_ |= 0x00000004;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.unkInt, unkInt);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.curMissionId, curMissionId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeEnum(FieldNames.trackMainMissionStatus, trackMainMissionStatus, TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate.converter());
      }
      output.endObject();
    }

    @Override
    public UpdateTrackMainMissionIdCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -840508003:
          case -285293790: {
            if (input.isAtField(FieldNames.unkInt)) {
              if (!input.trySkipNullValue()) {
                unkInt = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1870430873:
          case 50847757: {
            if (input.isAtField(FieldNames.curMissionId)) {
              if (!input.trySkipNullValue()) {
                curMissionId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1499566426:
          case -1020477353: {
            if (input.isAtField(FieldNames.trackMainMissionStatus)) {
              if (!input.trySkipNullValue()) {
                final TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate value = input.readEnum(TrackMainMissionUpdateOuterClass.TrackMainMissionUpdate.converter());
                if (value != null) {
                  trackMainMissionStatus = value.getNumber();
                  bitField0_ |= 0x00000004;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public UpdateTrackMainMissionIdCsReq clone() {
      return new UpdateTrackMainMissionIdCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static UpdateTrackMainMissionIdCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new UpdateTrackMainMissionIdCsReq(), data).checkInitialized();
    }

    public static UpdateTrackMainMissionIdCsReq parseFrom(final ProtoSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new UpdateTrackMainMissionIdCsReq(), input).checkInitialized();
    }

    public static UpdateTrackMainMissionIdCsReq parseFrom(final JsonSource input) throws
        IOException {
      return ProtoMessage.mergeFrom(new UpdateTrackMainMissionIdCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating UpdateTrackMainMissionIdCsReq messages
     */
    public static MessageFactory<UpdateTrackMainMissionIdCsReq> getFactory() {
      return UpdateTrackMainMissionIdCsReqFactory.INSTANCE;
    }

    private enum UpdateTrackMainMissionIdCsReqFactory implements MessageFactory<UpdateTrackMainMissionIdCsReq> {
      INSTANCE;

      @Override
      public UpdateTrackMainMissionIdCsReq create() {
        return UpdateTrackMainMissionIdCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName unkInt = FieldName.forField("unkInt", "unk_int");

      static final FieldName curMissionId = FieldName.forField("curMissionId", "cur_mission_id");

      static final FieldName trackMainMissionStatus = FieldName.forField("trackMainMissionStatus", "track_main_mission_status");
    }
  }
}
